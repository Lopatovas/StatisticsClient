{"version":3,"sources":["components/SearchBar.jsx","components/Table.jsx","components/List.jsx","containers/Landing/index.jsx","containers/Product/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["SearchBar","props","changeHandler","className","placeholder","type","onChange","e","Table","items","clickCallback","scope","map","item","key","id","name","category","onClick","List","Landing","state","categories","products","compareList","querried","filterItems","bind","addToCompare","this","getCategories","getProducts","setState","ProductData","value","target","filter","product","toLowerCase","includes","style","display","flexDirection","alignItems","flex","marginRight","height","overflow","marginLeft","Component","Product","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e10cc7c7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction SearchBar(props) {\r\n  const { changeHandler } = props;\r\n  return (\r\n    <div>\r\n      <div className=\"form-group\">\r\n        <div className=\"input-group input-group-alternative mb-4\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\"><i className=\"ni ni-zoom-split-in\" /></span>\r\n          </div>\r\n          <input className=\"form-control form-control-alternative\" placeholder=\"Search\" type=\"text\" onChange={(e) => { changeHandler(e); }} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\nfunction Table(props) {\r\n  const { items, clickCallback } = props;\r\n  return (\r\n    <div className=\"table-responsive\">\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n          <tr>\r\n            <th scope=\"col\">\r\n                    Name\r\n            </th>\r\n            <th scope=\"col\">\r\n                    Category\r\n            </th>\r\n            <th scope=\"col\">\r\n                    Action\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {items.map((item) => (\r\n            <tr key={item.id}>\r\n              <td>\r\n                {item.name}\r\n              </td>\r\n              <td>\r\n                {item.category}\r\n              </td>\r\n              <td>\r\n                <button type=\"button\" className=\"btn btn-default\" onClick={() => clickCallback(item)}>Add to compare list</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React from 'react';\n\nfunction List(props) {\n  const { items } = props;\n  return (\n    <div>\n      <ul className=\"list-group list-group-flush\">\n        {items.map((item) => (\n          <li className=\"list-group-item list-group-item-action\" key={items.id}>{item.name} </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default List;\n","import React, { Component } from 'react';\n\nimport ProductData from '../../mockup/products.json';\n\nimport SearchBar from '../../components/SearchBar';\nimport Table from '../../components/Table';\nimport List from '../../components/List';\n\nclass Landing extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      categories: [], products: [], compareList: [], querried: [],\n    };\n    this.filterItems = this.filterItems.bind(this);\n    this.addToCompare = this.addToCompare.bind(this);\n  }\n\n  componentDidMount() {\n    this.getCategories();\n    this.getProducts();\n  }\n\n  getCategories() {\n    this.setState({ categories: [{ name: 'Prizm' }, { name: 'Eos' }, { name: 'LaCrosse' }, { name: 'Fusion' }, { name: 'Prizm' }, { name: 'Eos' }, { name: 'LaCrosse' }, { name: 'Fusion' }, { name: 'Prizm' }, { name: 'Eos' }, { name: 'LaCrosse' }, { name: 'Fusion' }, { name: 'Prizm' }, { name: 'Eos' }, { name: 'LaCrosse' }, { name: 'Fusion' }, { name: 'Prizm' }, { name: 'Eos' }, { name: 'LaCrosse' }, { name: 'Fusion' }, { name: 'Prizm' }, { name: 'Eos' }, { name: 'LaCrosse' }, { name: 'Fusion' }] });\n  }\n\n  getProducts() {\n    this.setState({ products: ProductData, querried: ProductData });\n  }\n\n  filterItems(e) {\n    const { value } = e.target;\n    const { products } = this.state;\n    const querried = products.filter((product) => {\n      if (product.name.toLowerCase().includes(value.toLowerCase())) {\n        return product;\n      }\n    });\n    this.setState({ querried });\n  }\n\n  addToCompare(item){\n    this.setState({ compareList: [...this.state.compareList, item], querried: this.state.querried.filter((e) => e.id !== item.id )});\n  }\n\n  render() {\n    const { categories, querried, compareList, products } = this.state;\n    return (\n      <div className=\"container pt-5\">\n        <SearchBar changeHandler={this.filterItems} />\n        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'space-between' }}>\n          <div\n            className=\"card shadow rounded\"\n            style={{\n              flex: 1, marginRight: 50, height: '80vh',\n            }}\n          >\n            <h2 className=\"pt-4 pl-4\">Categories</h2>\n            <div style={{\n              height: '78vh', overflow: 'overlay',\n            }}>\n              <List items={categories} />\n            </div>\n          </div>\n          <div className=\"card shadow rounded\" style={{ flex: 4 }}>\n            <h2 className=\"pt-4 pl-4\">Products</h2>\n            <div className=\"pl-4 pr-4\" style={{\n              height: '70vh', overflow: 'overlay',\n            }}>\n              <Table items={querried} clickCallback={(e) => {this.addToCompare(e)}}/>\n            </div>\n          </div>\n          <div\n            className=\"card shadow rounded\"\n            style={{\n              flex: 1, marginLeft: 50, height: '80vh',\n            }}\n          >\n            <h2 className=\"pt-4 pl-4\">Comparable products</h2>\n            <div style={{\n              height: '70vh', overflow: 'overlay',\n            }}>\n              <List items={compareList} />\n            </div>\n            <button type=\"button\" className=\"btn btn-default w-75 mr-4 ml-4 mb-2 mt-2\" >Compare</button>\n            <button type=\"button\" className=\"btn btn-default w-75 mr-4 ml-4 mb-2\" onClick={() => {this.setState({compareList: [], querried: products })}}>Clear</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Landing;\n","import React, { Component } from \"react\";\r\n\r\nclass Product extends Component {\r\n  render() {\r\n    return <div>Product page</div>;\r\n  }\r\n}\r\n\r\nProduct.propTypes = {\r\n};\r\n\r\nexport default Product;","import React from 'react';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport Landing from './containers/Landing';\nimport Product from './containers/Product';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={Landing} />\n        <Route exact path=\"/Product\" component={Product} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/argon-dashboard.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}